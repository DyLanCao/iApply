##############################################################################################
#
#
# Copyright 2005 Free Software Foundation, Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# 
# Written by Thomas Klein <ThRKlein@users.sf.net>, 2005.
#
#
# example for Sammsung s3c44b0x
#

# This is the wrong place but our response to any monitor command (rcmd) will may take a while
set remotetimeout 8

# here is a definition of a Memory Map layout
monitor MemMap.MaxNum		= 2
monitor MemMap.MaxEntrys[0]	= 16
monitor MemMap[0][0]		= flash	,16, 0x0, 	 512 KByte	# Boot Flash
monitor MemMap[0][1]		= sfa	,32, 0x01c00000,   4 MByte	# Special Function Area
#monitor MemMap[0][2]		= flash ,16, 0x02000000, 512 KByte	# Second Flash
monitor MemMap[0][2]		= rom   ,16, 0x02000000, 512 KByte	# Second Flash
monitor MemMap[0][3]		= ram	,16, 0x0c000000,   4 MByte	# SDRAM
monitor MemMap[0][4]		= cache	,32, 0x10000000,   4 KByte	# cache
monitor MemMap[0][5]		= ram	,32, 0x10001000,   4 Kbyte	# onchip SRAM
monitor MemMap[0][6]		= unreal,32, 0xC0000000,   4 KByte	# pseudo stack to make gdb happy


monitor MemMap.MaxEntrys[1]	= 16

# 
# Define some command sequences

#
# After Reset Default Values
#
monitor  CmdSequence.MaxNum		= 10
monitor  CmdSequence.MaxEntrys[0]	= 64
monitor  CmdSequence[0][0]		= 32, 0x01c80000 ,0x0		# BWSCON
monitor  CmdSequence[0][1]		= 32, 0x01c80004 ,0x0700	# BANKCON0
monitor  CmdSequence[0][2]		= 32, 0x01c80008 ,0x0700	# BANKCON1
monitor  CmdSequence[0][3]		= 32, 0x01c8000c ,0x0700	# BANKCON2
monitor  CmdSequence[0][4]		= 32, 0x01c80010 ,0x0700	# BANKCON3
monitor  CmdSequence[0][5]		= 32, 0x01c80014 ,0x0700	# BANKCON4
monitor  CmdSequence[0][6]		= 32, 0x01c80018 ,0x0700	# BANKCON5
monitor  CmdSequence[0][7]		= 32, 0x01c8001c ,0x18008	# BANKCON6
monitor  CmdSequence[0][8]		= 32, 0x01c80020 ,0x18008	# BANKCON7
monitor  CmdSequence[0][9]		= 32, 0x01c80024 ,0xac0000	# REFRESH
monitor  CmdSequence[0][10]		= 32, 0x01c80028 ,0x0		# BANKSIZE
monitor  CmdSequence[0][11]		= 32, 0x01c8002c ,0x0		# MRSRB6
monitor  CmdSequence[0][12]		= 32, 0x01c80030 ,0x0		# MRSRB7
monitor  CmdSequence[0][13]		= 32, 0x01d80000 ,0x38080	# PLLCON
monitor  CmdSequence[0][14]		= 32, 0x01d80004 ,0x7ff8	# CLKCON
monitor  CmdSequence[0][15]		= 32, 0x01d80008 ,0x9		# CLKSLOW
monitor  CmdSequence[0][16]		= 32, 0x01c00000 ,0x1		# SYSCFG
monitor  CmdSequence[0][17]		= 32, 0x01c00004 ,0x0		# NCACHBE0
monitor  CmdSequence[0][18]		= 32, 0x01c00008 ,0x0		# NCACHBE1
monitor  CmdSequence[0][19]		= 32, 0x01c40000 ,0x80001b1b	# SYSCFG
monitor  CmdSequence[0][20]		= 32, 0x01e80000 ,0x0f		# ZDCON0
monitor  CmdSequence[0][21]		= 32, 0x01e80020 ,0x0f		# ZDCON1
monitor  CmdSequence[0][22]		= 32, 0x01f80000 ,0x0f		# BDCON0
monitor  CmdSequence[0][23]		= 32, 0x01f80020 ,0x0f		# BDCON1
monitor  CmdSequence[0][24]		= 32, 0x01d20000 ,0x3ff		# PCONA
monitor  CmdSequence[0][25]		= 32, 0x01d20008 ,0x7ff		# PCONB
monitor  CmdSequence[0][26]		= 32, 0x01d20018 ,0x0		# PUPC
monitor  CmdSequence[0][27]		= 32, 0x01d20010 ,0xaaaaaaaa	# PCONC
monitor  CmdSequence[0][28]		= 32, 0x01d20024 ,0x0		# PUPD
monitor  CmdSequence[0][29]		= 32, 0x01d2001C ,0x0		# PCOND
monitor  CmdSequence[0][30]		= 32, 0x01d20030 ,0x0		# PUPE
monitor  CmdSequence[0][31]		= 32, 0x01d20028 ,0x0		# PCONE
monitor  CmdSequence[0][32]		= 32, 0x01d2003c ,0x0		# PUPF
monitor  CmdSequence[0][33]		= 32, 0x01d20034 ,0x0		# PCONF
monitor  CmdSequence[0][34]		= 32, 0x01d20048 ,0x0		# PUPG
monitor  CmdSequence[0][35]		= 32, 0x01d20040 ,0x0		# PCONG
monitor  CmdSequence[0][36]		= 32, 0x01d2004c ,0x0		# SPUCR
monitor  CmdSequence[0][37]		= 32, 0x01d20050 ,0x0		# EXTINT
monitor  CmdSequence[0][38]		= 32, 0x01d50008 ,0x0		# TCON -> stop all timer
monitor  CmdSequence[0][39]		= 32, 0x01e00000 ,0x7		# INTCON ->disable any (samung) intrrupt
monitor  CmdSequence[0][40]		= 16, 0x01d30000 ,0x8021	# WTCON -> enable Watchdog

# watch dog disable
monitor  CmdSequence.MaxEntrys[1]	= 1
monitor  CmdSequence[1][0]		= 16, 0x01d30000 ,0x8000	# WTCON

#
monitor  CmdSequence.MaxEntrys[2]	= 1
monitor  CmdSequence[2][0]		= 32, 0x01e0000c ,0x07ffffff	# INTMSK all interrupt disable

#
#      Set memory control registers
monitor  CmdSequence.MaxEntrys[3]	= 13
# BWSCON Bank0=OM[1:0], Bank1~Bank7=16bit
monitor  CmdSequence[3][0]	= 32, 0x01c80000 ,0x1111110A	
# BANKCON0 -> GCS0
# (B0_Tacs<<13)+(B0_Tcos<<11)+(B0_Tacc<<8)+(B0_Tcoh<<6)+(B0_Tah<<4)+(B0_Tacp<<2)+(B0_PMC)
# Bank 0 parameter	  Flash
# B0_Tacs,    0x1    @1clk	0x2000
# B0_Tcos,    0x0    @0clk
# B0_Tacc,    0x4    @6clk	0x0400
# B0_Tcoh,    0x0    @0clk
# B0_Tah ,    0x0    @0clk
# B0_Tacp,    0x0    @0clk
# B0_PMC ,    0x0    @normal(1data)
monitor  CmdSequence[3][1]	= 32, 0x01c80004 ,0x2400
# BANKCON1 -> GCS1
# (B1_Tacs<<13)+(B1_Tcos<<11)+(B1_Tacc<<8)+(B1_Tcoh<<6)+(B1_Tah<<4)+(B1_Tacp<<2)+(B1_PMC)
# Bank 1 parameter	second Flash
# B1_Tacs,    0x1    @1clk	0x2000
# B1_Tcos,    0x0    @0clk
# B1_Tacc,    0x5    @8clk	0x0500
# B1_Tcoh,    0x0    @0clk
# B1_Tah ,    0x0    @0clk
# B1_Tacp,    0x0    @0clk
# B1_PMC ,    0x0    @normal(1data)
monitor  CmdSequence[3][2]	= 32, 0x01c80008 ,0x2500
# BANKCON2 -> GCS2
# (B2_Tacs<<13)+(B2_Tcos<<11)+(B2_Tacc<<8)+(B2_Tcoh<<6)+(B2_Tah<<4)+(B2_Tacp<<2)+(B2_PMC)
# Bank 2 parameter	  Flash	(mirror of fist Flash)
# B2_Tacs,    0x1    @1clk	0x2000
# B2_Tcos,    0x0    @0clk
# B2_Tacc,    0x6    @10clk	0x0600
# B2_Tcoh,    0x0    @0clk
# B2_Tah ,    0x0    @0clk
# B2_Tacp,    0x0    @0clk
# B2_PMC ,    0x0    @normal(1data)
monitor  CmdSequence[3][3]	= 32, 0x01c8000c ,0x2600
# BANKCON3
# (B3_Tacs<<13)+(B3_Tcos<<11)+(B3_Tacc<<8)+(B3_Tcoh<<6)+(B3_Tah<<4)+(B3_Tacp<<2)+(B3_PMC)
# Bank 3 parameter	  unused
# B3_Tacs,    0x3    @4clk	0x6000
# B3_Tcos,    0x3    @4clk	0x1800
# B3_Tacc,    0x7    @14clk	0x0700
# B3_Tcoh,    0x3    @4clk	0x00C0
# B3_Tah ,    0x3    @4clk	0x0030
# B3_Tacp,    0x3    @6clk	0x000C
# B3_PMC ,    0x0    @normal(1data)
monitor  CmdSequence[3][4]	= 32, 0x01c80010 ,0x7FFC	# BANKCON3
monitor  CmdSequence[3][5]	= 32, 0x01c80014 ,0x7FFC	# BANKCON4
monitor  CmdSequence[3][6]	= 32, 0x01c80018 ,0x7FFC	# BANKCON5

# BANKCON6 -> GCS6
# ((B6_MT<<15)+(B6_Trcd<<2)+(B6_SCAN))
# BDRAMTYPE, "SDRAM"           @MT=11(SDRAM)
# B6_MT  ,    0x3     @SDRAM	0x18000
# B6_Trcd,    0x1     @3clk	0x00004
# B6_SCAN,    0x0     @8bit
monitor  CmdSequence[3][7]	= 32, 0x01c8001c ,0x18004	# BANKCON6
monitor  CmdSequence[3][8]	= 32, 0x01c80020 ,0x18004	# BANKCON7
# REFRESH
# (REFEN<<23)+(TREFMD<<22)+(Trp<<20)+(Trc<<18)+(Tchr<<16)+REFCNT
# REFRESH parameter
# REFEN ,    0x1     @Refresh enable			0x800000
# TREFMD,    0x0     @CBR(CAS before RAS)/Auto refresh
# Trp   ,    0x2     @4clk				0x200000
# Trc   ,    0x2     @6clk				0x080000
# Tchr  ,    0x3     @4clk				0x030000
# REFCNT,    1113    @period=15us, MCLK=60Mhz		0x000459
monitor  CmdSequence[3][9]	= 32, 0x01c80024 ,0xab0459	
monitor  CmdSequence[3][10]	= 32, 0x01c80028 ,0x14		# SCLK power mode, BANKSIZE 2M/2M
monitor  CmdSequence[3][11]	= 32, 0x01c8002c ,0x20		# MRSRB6 CAS Latency =2clk
monitor  CmdSequence[3][12]	= 32, 0x01c80030 ,0x20		# MRSRB7

#
#        Set clock control registers
monitor  CmdSequence.MaxEntrys[4]	= 4
monitor  CmdSequence[4][0]	= 32, 0x01d8000c ,5720		# LOCKTIME must be more than 400usec -> 400usec * 14.3MHz = 5720
# (M_DIV<<12)+(P_DIV<<4)+S_DIV 
# M_DIV ,  0x4C (0x4C000)     @ Fin=14,318MHz Fout=60MHz Fvco=120MHz
# P_DIV ,  0x8	(0x80)
# S_DIV ,  0x1
monitor  CmdSequence[4][1]	= 32, 0x01d80000 ,0x4C081	# PLLCON
monitor  CmdSequence[4][2]	= 32, 0x01d80004 ,0x7ff8	# CLKCON All unit block CLK enable

#
# SYSCFG -> disable Cache
monitor  CmdSequence.MaxEntrys[5]	= 3
monitor  CmdSequence[5][0]	= 32, 0x01c00000 , 0

# tell that we did not use standard RAM as workspace
#monitor modeWorkspace = 0

# tell that we would like to use the top of our RAM as a workspace (if no extra is given)
monitor modeWorkspace = 1

# activate the Map
monitor UseMemMap[0]

# excecute command sequence:
#monitor cmd 0	# Restore Reset values
monitor cmd 1	# watch dog disable
monitor cmd 2	# INTMSK all interrupt disable
monitor cmd 3	# Set memory control registers
monitor cmd 4	# set clock
monitor cmd 5	# disable cache


#
#set step-mode on
#undisplay
#display/x $pc
#display/i $pc

monitor SysInfo

# set SP register to "unreal" memory -> so we can access PC register via gdb $pc variable
monitor Register[13] = 0xC0000100
# set PC to zero
monitor Register[15] = 0x0
# write dummy value into the "unreal" memory
set variable *0xC0000000=0xC0000100
# force rereading of registers
monitor FakeContinue = 1
continue
monitor FakeContinue = 0
# now we can change cprs too
set $cprs=0xD3

